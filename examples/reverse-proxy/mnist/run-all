#!/usr/bin/env bash

######################################################################
## (C)Copyright 2022 Hewlett Packard Enterprise Development LP
######################################################################


## run a 1-SN, 2-SL and 1-SWOP and 1-SWCI :
##  a. sn-1 api: service
##  b. sn-1 p2p: service
##  c. sl-1 fs: service
##  d. sl-2 fs: service

# All examples assumes APLS is already running. User needs to pass this IP accordingly

APLS_IP=$1
[[ -z "$1" ]] && { echo "APLS IP is empty" ; exit 1; }
echo "APLS IP: "${APLS_IP}

Host_IP=$2
[[ -z "$2" ]] && { echo "IP address of the Host 1 is empty" ; exit 1; }
echo "HOST 1 IP: "${Host_IP_1}

# Checks for the wait time of sn. If not passed by default it waits for 5 minutes 
[[ -n "${3}" ]] && snWaitTime=${3} || snWaitTime="5m"


if [[ -f "$(pwd)/scripts/bin/common" ]]
then
    # Pulling swarm images version without using entire common file.
    swarmVersion=$(grep -m1 swarmVer scripts/bin/common | cut -c 11- | cut -d '"' -f1)
    echo "Swarm Version : ${swarmVersion}"
else
    echo "It is mandatory to run these scripts in the base(swarm-learning) directory of this repository. Please cd(change directory) to base directory."
    exit 1; 
fi

reverseProxyDir=$(pwd)/examples/reverse-proxy
reverseProxyMnistDir=$(pwd)/examples/reverse-proxy/mnist
workingDir=$(pwd)/workspace/reverse-proxy/mnist

mkdir -p ${workingDir}
cp -r ${reverseProxyMnistDir}/swci ${reverseProxyMnistDir}/swop ${workingDir}/
cp -r ${reverseProxyMnistDir}/app-data ${reverseProxyMnistDir}/model ${workingDir}/
cp -r $(pwd)/examples/utils/gen-cert ${workingDir}/

# Download the mnist data to the reverse proxy's mnist workspace
curl https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz -o ${workingDir}/app-data/mnist.npz

# Generates self-signed certificates on the workspace. 
generateCertificates()
{
    "./workspace/reverse-proxy/mnist/gen-cert"      \
    -e reverse-proxy/mnist                          \
    -i 1
}

build()
{
    # Build the nginx image.
    docker build                                    \
        -t nginx:${swarmVersion}                    \
        --build-arg http_proxy=${http_proxy}        \
        --build-arg https_proxy=${https_proxy}      \
        --build-arg no_proxy=${no_proxy}            \
        -                                           \
        < "${reverseProxyDir}/common/Nginx-Dockerfile"
    [[ $? -ne 0 ]] && exit 1


    # Build the bind image.
    docker build                                    \
        -t bind9:${swarmVersion}                    \
        --build-arg http_proxy=${http_proxy}        \
        --build-arg https_proxy=${https_proxy}      \
        --build-arg no_proxy=${no_proxy}            \
        -                                           \
        < "${reverseProxyDir}/common/Bind-Dockerfile"
    [[ $? -ne 0 ]] && exit 1

    return 0
}


# Alters the nginx.conf file according to the requirements of this mnist example
# Registers the IP addresses to specific FQDN names within BIND9 (DNS Server)
registerIP()
{
    sed -f - "${reverseProxyMnistDir}/nginx.conf" > "${workingDir}/nginx.conf" << _EOF
s/<sn-1-ip>/${Host_IP}/g
s/<sl-1-ip>/${Host_IP}/g
s/<sl-2-ip>/${Host_IP}/g
_EOF

    # Services.
    docker exec "${1}" add-dns -d api.sn-1.swarm -i ${Host_IP}
    docker exec "${1}" add-dns -d p2p.sn-1.swarm -i ${Host_IP}
    docker exec "${1}" add-dns -d fs.sl-1.swarm -i ${Host_IP}
    docker exec "${1}" add-dns -d fs.sl-2.swarm -i ${Host_IP}
    return 0
}


# Starts the BIND9 container to serve as DNS server
startBind9Server()
{
    docker run                      \
        -d                          \
        --name=swarm-bind9          \
        -e no_proxy="${no_proxy}"   \
        bind9:${swarmVersion}       \
        -d swarm

    return 0
}

# Starts the NGINX container with the desired nginx.conf configuration
startNginx()
{
    docker run                                                          \
        -d                                                              \
        --name=nginx                                                    \
        -v ${workingDir}/nginx.conf:/etc/nginx/nginx.conf               \
        -e no_proxy="${no_proxy}"                                       \
        -p 443:443                                                      \
        nginx:${swarmVersion}

    return 0
}

setNoProxy()
{
    no_proxy=".swarm,${no_proxy}"
    return 0
}

# Creates volume sl-cli-lib and moves the whl file in to it.
moveWhlToVolume()
{
    docker volume rm sl-cli-lib
    docker volume create sl-cli-lib
    docker container create --name helper -v sl-cli-lib:/data hello-world
    docker cp -L lib/swarmlearning-client-py3-none-manylinux_2_24_x86_64.whl helper:/data
    docker rm helper
}

build
setNoProxy
startBind9Server
moveWhlToVolume


# Get the container IP of the BIND9 server
BIND9_IP=$(docker exec swarm-bind9 hostname -I | cut -d' ' -f1)

# Modifies the swop profile in the workspaace to change the fields like <CURRENT-PATH>, <APLS-IP> and <DNS>
# Also Modifies the <CURRENT-PATH> in swarm_mnist_task file
sed -i "s+<CURRENT-PATH>+$(pwd)+g" "${workingDir}"/swop/swop*_profile.yaml "${workingDir}"/swci/taskdefs/swarm_mnist_task.yaml
sed -i "s+<APLS-IP>+${APLS_IP}+g" "${workingDir}"/swop/swop*_profile.yaml
sed -i "s+<DNS>+${BIND9_IP}+g" "${workingDir}"/swop/swop*_profile.yaml

registerIP swarm-bind9
startNginx
generateCertificates

# Start Swarm components.
# --dns is the DNS IP to which the container will interact to resolve ip addresses
# --sn-api-service and sn-p2p-service are the FQDN names used within reverse proxy
# to overcome the usage of ports.
echo "#################### Starting SN ####################"
"./scripts/bin/run-sn"                                  \
    -d                                                  \
    --name=sn-1                                         \
    --hostname=sn-1.swarm                               \
    --dns=${BIND9_IP}                                   \
    --sn-api-service=api.sn-1.swarm                     \
    --sn-p2p-service=p2p.sn-1.swarm                     \
    --sentinel                                          \
    -p 30303:30303                                      \
    -p 30304:30304                                      \
    --apls-ip=${APLS_IP}                                \
    -e no_proxy="${no_proxy}"                           \
    --key=${workingDir}/cert/sn-1-key.pem               \
    --cert=${workingDir}/cert/sn-1-cert.pem             \
    --capath=${workingDir}/cert/ca/capath
[[ $? -ne 0 ]] && exit 1
sleep ${snWaitTime}

echo "#################### Starting SWOP ####################"
"./scripts/bin/run-swop"                                \
    -d                                                  \
    --name=swop-1                                       \
    --dns=${BIND9_IP}                                   \
    --sn-api-service=api.sn-1.swarm                     \
    --apls-ip=${APLS_IP}                                \
    -e no_proxy="${no_proxy}"                           \
    -e http_proxy=                                      \
    -e https_proxy=                                     \
    -e SWOP_KEEP_CONTAINERS=1                           \
    --usr-dir=${workingDir}/swop                        \
    --profile-file-name=swop1_profile.yaml              \
    --key=${workingDir}/cert/swop-1-key.pem             \
    --cert=${workingDir}/cert/swop-1-cert.pem           \
    --capath=${workingDir}/cert/ca/capath          

echo "#################### Starting SWCI ####################"
"./scripts/bin/run-swci"                                \
    --rm=false                                          \
    -dt                                                 \
    --name=swci-1                                       \
    --dns=${BIND9_IP}                                   \
    --apls-ip=${APLS_IP}                                \
    -e no_proxy="${no_proxy}"                           \
    -e http_proxy=                                      \
    -e https_proxy=                                     \
    --usr-dir=${workingDir}/swci                        \
    --init-script-name=swci-init                        \
    --key=${workingDir}/cert/swci-1-key.pem             \
    --cert=${workingDir}/cert/swci-1-cert.pem           \
    --capath=${workingDir}/cert/ca/capath              
